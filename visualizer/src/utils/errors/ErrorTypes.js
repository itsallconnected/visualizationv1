import registry from '../../ModuleRegistry';\n\n/**\n * Error Types and Classification System\n * \n * This module defines a comprehensive error class hierarchy and error code system\n * to provide structured error information across the application.\n * \n * Features:\n * - Base application error class\n * - Specialized error subclasses for different error categories\n * - Error code system with semantic meaning\n * - Error severity classification\n * - User-friendly error messages and developer details\n */\n\n/**\n * Enum for error categories\n * @readonly\n * @enum {string}\n */\nexport const ErrorCategory = {\n  // Application layer errors\n  APP: 'app',             // General application errors\n  UI: 'ui',               // UI and rendering errors\n  ROUTE: 'route',         // Routing and navigation errors\n  \n  // Data layer errors\n  DATA: 'data',           // Data model and state errors\n  API: 'api',             // API and network request errors\n  STORAGE: 'storage',     // Storage and persistence errors\n  \n  // Visualization layer errors\n  RENDER: 'render',       // 3D rendering errors\n  SCENE: 'scene',         // Scene management errors\n  LAYOUT: 'layout',       // Layout computation errors\n  \n  // Authentication and security errors\n  AUTH: 'auth',           // Authentication errors\n  PERMISSION: 'permission', // Permission and access errors\n  CRYPTO: 'crypto',       // Encryption and security errors\n  \n  // System and infrastructure errors\n  SYSTEM: 'system',       // System and environment errors\n  CONFIG: 'config',       // Configuration errors\n  MODULE: 'module',       // Module and dependency errors\n  \n  // Input/output errors\n  IO: 'io',               // Input/output errors\n  FORMAT: 'format',       // Data format and parsing errors\n  VALIDATION: 'validation' // Validation and schema errors\n};\n\n/**\n * Enum for error severity levels\n * @readonly\n * @enum {string}\n */\nexport const ErrorSeverity = {\n  FATAL: 'fatal',      // Application cannot continue, requires restart\n  ERROR: 'error',      // Operation failed, but application can continue\n  WARNING: 'warning',  // Operation succeeded but with issues\n  INFO: 'info'         // Informational issue, not affecting operation\n};\n\n/**\n * Base application error class\n * Extends native Error with additional properties for error classification\n */\nexport class AppError extends Error {\n  /**\n   * Create a new application error\n   * @param {string} message - User-friendly error message\n   * @param {Object} options - Error options\n   * @param {string} options.category - Error category from ErrorCategory enum\n   * @param {string} options.code - Error code (format: CATEGORY_SPECIFIC_ERROR)\n   * @param {string} options.severity - Error severity from ErrorSeverity enum\n   * @param {*} options.data - Additional error data\n   * @param {Error} options.cause - Original error that caused this error\n   * @param {string} options.devMessage - Developer-specific error message with more details\n   */\n  constructor(message, options = {}) {\n    super(message);\n    \n    // Set name to constructor name instead of Error\n    this.name = this.constructor.name;\n    \n    // Standard error properties\n    this.category = options.category || ErrorCategory.APP;\n    this.code = options.code || 'UNKNOWN_ERROR';\n    this.severity = options.severity || ErrorSeverity.ERROR;\n    this.data = options.data || {};\n    this.timestamp = Date.now();\n    \n    // Error chaining\n    this.cause = options.cause;\n    \n    // Developer-specific detailed message\n    this.devMessage = options.devMessage || message;\n    \n    // Capture stack trace, excluding constructor call\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n  \n  /**\n   * Convert error to JSON-serializable object\n   * @returns {Object} JSON representation of error\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      devMessage: this.devMessage,\n      category: this.category,\n      code: this.code,\n      severity: this.severity,\n      data: this.data,\n      timestamp: this.timestamp,\n      stack: this.stack,\n      cause: this.cause ? \n        (this.cause instanceof AppError ? \n          this.cause.toJSON() : \n          { message: this.cause.message, stack: this.cause.stack }) : \n        null\n    };\n  }\n}\n\n/**\n * API error class for handling request/response errors\n */\nexport class ApiError extends AppError {\n  /**\n   * Create an API error\n   * @param {string} message - User-friendly error message\n   * @param {Object} options - Error options\n   * @param {number} options.statusCode - HTTP status code\n   * @param {string} options.endpoint - API endpoint that failed\n   * @param {Object} options.request - Request data\n   * @param {Object} options.response - Response data\n   */\n  constructor(message, options = {}) {\n    super(message, {\n      category: ErrorCategory.API,\n      code: options.code || `API_${options.statusCode || 'ERROR'}`,\n      ...options\n    });\n    \n    this.statusCode = options.statusCode;\n    this.endpoint = options.endpoint;\n    this.request = options.request;\n    this.response = options.response;\n  }\n}\n\n/**\n * Authentication error class for handling auth failures\n */\nexport class AuthError extends AppError {\n  /**\n   * Create an authentication error\n   * @param {string} message - User-friendly error message\n   * @param {Object} options - Error options\n   * @param {string} options.action - Auth action that failed (login, logout, etc.)\n   * @param {string} options.provider - Auth provider (github, etc.)\n   */\n  constructor(message, options = {}) {\n    super(message, {\n      category: ErrorCategory.AUTH,\n      code: options.code || `AUTH_${options.action?.toUpperCase() || 'ERROR'}`,\n      ...options\n    });\n    \n    this.action = options.action;\n    this.provider = options.provider;\n  }\n}\n\n/**\n * Permission error class for handling access control failures\n */\nexport class PermissionError extends AppError {\n  /**\n   * Create a permission error\n   * @param {string} message - User-friendly error message\n   * @param {Object} options - Error options\n   * @param {string} options.resource - Resource being accessed\n   * @param {string} options.action - Action being performed\n   * @param {Array<string>} options.requiredPermissions - Permissions that were required\n   */\n  constructor(message, options = {}) {\n    super(message, {\n      category: ErrorCategory.PERMISSION,\n      code: options.code || 'PERMISSION_DENIED',\n      severity: ErrorSeverity.ERROR,\n      ...options\n    });\n    \n    this.resource = options.resource;\n    this.action = options.action;\n    this.requiredPermissions = options.requiredPermissions;\n  }\n}\n\n/**\n * Validation error class for handling data validation failures\n */\nexport class ValidationError extends AppError {\n  /**\n   * Create a validation error\n   * @param {string} message - User-friendly error message\n   * @param {Object} options - Error options\n   * @param {Array<Object>} options.validationErrors - List of validation errors\n   * @param {string} options.fieldName - Name of field with validation error\n   */\n  constructor(message, options = {}) {\n    super(message, {\n      category: ErrorCategory.VALIDATION,\n      code: options.code || 'VALIDATION_ERROR',\n      severity: ErrorSeverity.WARNING,\n      ...options\n    });\n    \n    this.validationErrors = options.validationErrors || [];\n    this.fieldName = options.fieldName;\n  }\n}\n\n/**\n * Rendering error class for handling 3D visualization failures\n */\nexport class RenderError extends AppError {\n  /**\n   * Create a rendering error\n   * @param {string} message - User-friendly error message\n   * @param {Object} options - Error options\n   * @param {string} options.renderer - Renderer name\n   * @param {string} options.context - Rendering context information\n   */\n  constructor(message, options = {}) {\n    super(message, {\n      category: ErrorCategory.RENDER,\n      code: options.code || 'RENDER_ERROR',\n      ...options\n    });\n    \n    this.renderer = options.renderer;\n    this.context = options.context;\n  }\n}\n\n/**\n * Configuration error class for handling config and settings issues\n */\nexport class ConfigError extends AppError {\n  /**\n   * Create a configuration error\n   * @param {string} message - User-friendly error message\n   * @param {Object} options - Error options\n   * @param {string} options.configKey - Configuration key with the issue\n   * @param {*} options.value - Problematic value\n   * @param {*} options.expectedType - Expected type or format\n   */\n  constructor(message, options = {}) {\n    super(message, {\n      category: ErrorCategory.CONFIG,\n      code: options.code || 'CONFIG_ERROR',\n      ...options\n    });\n    \n    this.configKey = options.configKey;\n    this.value = options.value;\n    this.expectedType = options.expectedType;\n  }\n}\n\n/**\n * Data error class for handling data model and state issues\n */\nexport class DataError extends AppError {\n  /**\n   * Create a data error\n   * @param {string} message - User-friendly error message\n   * @param {Object} options - Error options\n   * @param {string} options.entity - Entity type with the issue\n   * @param {string} options.id - Entity ID with the issue\n   * @param {string} options.operation - Operation that failed\n   */\n  constructor(message, options = {}) {\n    super(message, {\n      category: ErrorCategory.DATA,\n      code: options.code || `DATA_${options.operation?.toUpperCase() || 'ERROR'}`,\n      ...options\n    });\n    \n    this.entity = options.entity;\n    this.id = options.id;\n    this.operation = options.operation;\n  }\n}\n\n/**\n * Module error class for handling module and dependency issues\n */\nexport class ModuleError extends AppError {\n  /**\n   * Create a module error\n   * @param {string} message - User-friendly error message\n   * @param {Object} options - Error options\n   * @param {string} options.moduleName - Name of module with the issue\n   * @param {Array<string>} options.dependencies - Dependencies involved\n   * @param {string} options.operation - Operation that failed\n   */\n  constructor(message, options = {}) {\n    super(message, {\n      category: ErrorCategory.MODULE,\n      code: options.code || 'MODULE_ERROR',\n      ...options\n    });\n    \n    this.moduleName = options.moduleName;\n    this.dependencies = options.dependencies;\n    this.operation = options.operation;\n  }\n}\n\n/**\n * Create an error factory to simplify error creation\n * @returns {Object} Error factory functions\n */\nconst createErrorFactory = () => {\n  return {\n    /**\n     * Create an application error\n     * @param {string} message - Error message\n     * @param {Object} options - Error options\n     * @returns {AppError} Application error instance\n     */\n    createAppError: (message, options) => new AppError(message, options),\n    \n    /**\n     * Create an API error\n     * @param {string} message - Error message\n     * @param {Object} options - Error options\n     * @returns {ApiError} API error instance\n     */\n    createApiError: (message, options) => new ApiError(message, options),\n    \n    /**\n     * Create an authentication error\n     * @param {string} message - Error message\n     * @param {Object} options - Error options\n     * @returns {AuthError} Auth error instance\n     */\n    createAuthError: (message, options) => new AuthError(message, options),\n    \n    /**\n     * Create a permission error\n     * @param {string} message - Error message\n     * @param {Object} options - Error options\n     * @returns {PermissionError} Permission error instance\n     */\n    createPermissionError: (message, options) => new PermissionError(message, options),\n    \n    /**\n     * Create a validation error\n     * @param {string} message - Error message\n     * @param {Object} options - Error options\n     * @returns {ValidationError} Validation error instance\n     */\n    createValidationError: (message, options) => new ValidationError(message, options),\n    \n    /**\n     * Create a rendering error\n     * @param {string} message - Error message\n     * @param {Object} options - Error options\n     * @returns {RenderError} Render error instance\n     */\n    createRenderError: (message, options) => new RenderError(message, options),\n    \n    /**\n     * Create a configuration error\n     * @param {string} message - Error message\n     * @param {Object} options - Error options\n     * @returns {ConfigError} Config error instance\n     */\n    createConfigError: (message, options) => new ConfigError(message, options),\n    \n    /**\n     * Create a data error\n     * @param {string} message - Error message\n     * @param {Object} options - Error options\n     * @returns {DataError} Data error instance\n     */\n    createDataError: (message, options) => new DataError(message, options),\n    \n    /**\n     * Create a module error\n     * @param {string} message - Error message\n     * @param {Object} options - Error options\n     * @returns {ModuleError} Module error instance\n     */\n    createModuleError: (message, options) => new ModuleError(message, options),\n    \n    // Error type constants\n    ErrorCategory,\n    ErrorSeverity\n  };\n};\n\n// Create error factory instance\nconst errorFactory = createErrorFactory();\n\n// Register with ModuleRegistry\nregistry.register(\n  'utils.errors.ErrorTypes',\n  errorFactory,\n  [],\n  {\n    description: 'Error types and factory for application errors',\n    provides: ['errorTypes', 'errorFactory']\n  }\n);\n\nexport default errorFactory; 